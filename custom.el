(set-variable 'ag-arguments (quote ("--line-number" "--smart-case" "--column" "--nogroup")))
(set-variable 'ag-highlight-search t)
(set-variable 'ag-ignore-list (quote ("build/*" "*.ipynb" "core.*" "core" "*.css")))
(set-variable 'ag-ignore-list (quote ("build/*" "*.ipynb" "core.*" "core")))
(set-variable 'ag-reuse-buffers t)
(set-variable 'blink-cursor-mode nil)
(set-variable 'c-syntactic-indentation t)
(set-variable 'c-tab-always-indent t)
(set-variable 'company-auto-complete (quote (quote company-explicit-action-p)))
(set-variable 'compilation-always-kill t)
(set-variable 'compilation-auto-jump-to-first-error nil)
(set-variable 'compilation-environment nil)
(set-variable 'compilation-scroll-output (quote first-error))
(set-variable 'compilation-search-path (quote (nil "/usr/bin/")))
(set-variable 'compilation-skip-threshold 2)
(set-variable 'current-language-environment "UTF-8")
(set-variable 'dabbrev-case-fold-search t)
(set-variable 'dabbrev-case-fold-search t)
(set-variable 'delete-selection-mode nil)
(set-variable 'delete-selection-mode nil)
(set-variable 'delete-selection-mode nil)
(set-variable 'dired-listing-switches "-alh")
(set-variable 'doc-view-continuous t)
(set-variable 'doxymacs-command-character "\\")
(set-variable 'ediff-custom-diff-options "-c  -w")
(set-variable 'ediff-diff-options "-w")
(set-variable 'ediff-split-window-function (quote split-window-horizontally))
(set-variable 'emacs-lock-default-locking-mode (quote kill))
(set-variable 'explicit-bash-args (quote ("--noediting" "-i")))
(set-variable 'explicit-shell-file-name nil)
(set-variable 'fill-column 79)
(set-variable 'comment-fill-column 79)
(set-variable 'flycheck-c/c++-clang-executable nil)
(set-variable 'flycheck-gcc-language-standard "c++11")
(set-variable 'flycheck-check-syntax-automatically (quote (save idle-change new-line mode-enabled)))
(set-variable 'flycheck-clang-args (quote ("-Wno-unneeded-internal-declaration")))
(set-variable 'flycheck-clang-definitions (quote ("BOOST_PP_VARIADICS=1")))
(set-variable 'flycheck-clang-language-standard "c++11")
(set-variable 'flycheck-completion-system (quote ido))
(set-variable 'flycheck-disabled-checkers (quote (c/c++-cppcheck)))
(set-variable 'flycheck-gcc-language-standard "c++11")
(set-variable 'flycheck-idle-change-delay 0.2)
(set-variable 'flycheck-navigation-minimum-level (quote warning))
(set-variable 'flycheck-flake8-maximum-complexity 9)
(set-variable 'flycheck-flake8-maximum-line-length 79)

(set-variable 'flymake-gui-warnings-enabled nil)
(set-variable 'global-highlight-changes-mode t)
(set-variable 'highlight-changes-visibility-initial-state nil)
(set-variable 'ido-auto-merge-delay-time 10)
(set-variable 'ido-enable-flex-matching t)
(set-variable 'ido-enter-matching-directory (quote only))
(set-variable 'ido-everywhere t)
(set-variable 'ido-use-filename-at-point (quote guess))
(set-variable 'ido-use-url-at-point t)
(set-variable 'indent-tabs-mode nil)
(set-variable 'irony-additional-clang-options (quote ("-std=c++11 -I../src -I../../src -I../../../src")))
(set-variable 'irony-supported-major-modes (quote (c++-mode c-mode objc-mode protobuf-mode)))
(set-variable 'irony-supported-major-modes (quote (c++-mode c-mode objc-mode protobuf-mode)))
(set-variable 'ispell-dictionary "deutsch")
(set-variable 'ispell-extra-args nil)
(set-variable 'ispell-program-name "/usr/bin/aspell")
(set-variable 'load-home-init-file t t)
(set-variable 'mark-even-if-inactive t)
(set-variable 'mark-even-if-inactive t)
(set-variable 'mark-even-if-inactive t)
(set-variable 'preview-gs-command "/opt/local/bin/gs")
(set-variable 'projectile-bzr-command "true")
(set-variable 'projectile-darcs-command "true")
(set-variable 'projectile-enable-caching t)
(set-variable 'projectile-git-command "true")
(set-variable 'projectile-hg-command "true")
(set-variable 'projectile-indexing-method (quote native))
(set-variable 'projectile-project-root-files (quote ("rebar.config" "project.clj" "pom.xml" "build.sbt" "build.gradle" "Gemfile" "requirements.txt" "package.json" "gulpfile.js" "Gruntfile.js" "bower.json" "composer.json" "SConstruct" "lastPerformance.pdf" "run.log")))
(set-variable 'projectile-project-root-files-bottom-up (quote (".projectile" ".git" ".hg" ".fslckout" ".bzr" "_darcs" "SConstruct" "setup.py")))
(set-variable 'projectile-project-root-files-top-down-recurring (quote ("CVS" "SConscript")))
(set-variable 'projectile-require-project-root t)
(set-variable 'projectile-ignored-projects (quote ("/nfs/home/")))
(set-variable 'projectile-globally-ignored-directories
   (quote
    (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "build")))
(set-variable  'org-log-done (quote time))
(set-variable 'ps-paper-type (quote a4))
(set-variable 'ps-print-color-p nil)
(set-variable 'python-shell-interpreter "ipython")
(set-variable 'python-shell-interpreter "ipython")
(set-variable 'python-fill-docstring-style 'django)
(set-variable 'recentf-initialize-file-name-history t)
(set-variable 'recentf-max-saved-items 8)
(set-variable 'recentf-mode t)
(set-variable 'reftex-plug-into-AUCTeX t)
(set-variable 'safe-local-variable-values (quote ((emacs-lisp-docstring-fill-column . 75))))
(set-variable 'scroll-bar-mode (quote right))
(set-variable 'scroll-bar-mode (quote right))
(set-variable 'scroll-bar-mode (quote right))
(set-variable 'semantic-c-dependency-system-include-path (quote ("/usr/include")))
(set-variable 'semantic-decoration-styles (quote (("semantic-decoration-on-includes" . t) ("semantic-decoration-on-protected-members" . t) ("semantic-decoration-on-private-members" . t) ("semantic-tag-boundary" . t))))
(set-variable 'semantic-idle-scheduler-idle-time 1)
(set-variable 'semantic-idle-scheduler-work-idle-time 60)
(set-variable 'transient-mark-mode 1)
(set-variable 'transient-mark-mode 1)
(set-variable 'user-full-name "Lukas Schuller")
(set-variable 'vc-log-show-limit 100)
(set-variable 'visible-cursor nil)
(set-variable 'void-text-area-pointer (quote arrow))
(set-variable 'global-anzu-mode t)

(set-variable 'company-backends
   (quote (company-irony company-elisp company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-ropemacs company-cmake
                         (company-dabbrev-code ;; company-gtags company-etags
                                         company-keywords)
                   company-oddmuse company-files company-dabbrev)))

(set-face-foreground 'ido-subdir "#ccaa8f")
(set-face-foreground 'ido-only-match "ForestGreen")
(set-face-foreground 'error "firebrick2")
(set-face-foreground 'compilation-info "#cae682")
(set-face-background 'cursor "gray50")
