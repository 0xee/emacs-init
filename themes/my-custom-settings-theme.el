

(deftheme my-custom-settings
  "Contains my permanent customizations. No faces")

(custom-theme-set-variables
 'my-custom-settings

 '(ag-arguments (quote ("--line-number" "--smart-case" "--column" "--nogroup")))
 '(ag-highlight-search t)
 '(ag-ignore-list (quote ("build/*" "*.ipynb" "core.*" "core" "*.css")))
 '(ag-reuse-buffers t)
 '(blink-cursor-mode nil)
 '(c-syntactic-indentation t)
 '(c-tab-always-indent t)
 '(comment-fill-column 79)
 '(company-auto-complete (quote (quote company-explicit-action-p)))
; '(company-backends (quote (company-irony company-elisp company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-ropemacs company-cmake company-dabbrev-code company-keywords company-oddmuse company-files company-dabbrev)))
 '(compilation-always-kill t)
 '(compilation-auto-jump-to-first-error nil)
 '(compilation-environment nil)
 '(compilation-scroll-output (quote first-error))
 '(compilation-search-path (quote (nil "/usr/bin/")))
 '(compilation-skip-threshold 2)
 '(current-language-environment "UTF-8")
 '(dabbrev-case-fold-search t)
 '(dabbrev-case-fold-search t)
 '(delete-selection-mode nil)
 '(delete-selection-mode nil)
 '(delete-selection-mode nil)
 '(dired-listing-switches "-alh")
 '(doc-view-continuous t)
 '(doxymacs-command-character "\\")
 '(ediff-custom-diff-options "-c  -w")
 '(ediff-diff-options "-w")
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(emacs-lock-default-locking-mode (quote kill))
 '(explicit-bash-args (quote ("--noediting" "-i")))
 '(explicit-shell-file-name nil)
 '(fill-column 79)
 '(flex-isearch-auto (quote on-failed))
 '(flycheck-c/c++-clang-executable nil)
 '(flycheck-check-syntax-automatically (quote (save idle-change new-line mode-enabled)))
 '(flycheck-clang-args (quote ("-Wno-unneeded-internal-declaration")))
 '(flycheck-clang-definitions (quote ("BOOST_PP_VARIADICS=1")))
 '(flycheck-clang-language-standard "c++11")
 '(flycheck-completion-system (quote ido))
 '(flycheck-disabled-checkers (quote (c/c++-cppcheck)))
 '(flycheck-flake8-maximum-complexity 9)
 '(flycheck-flake8-maximum-line-length 79)
 '(flycheck-gcc-language-standard "c++11")
 '(flycheck-gcc-language-standard "c++11")
 '(flycheck-idle-change-delay 0.2)
 '(flycheck-navigation-minimum-level (quote warning))
 '(flymake-gui-warnings-enabled nil)
 '(global-flex-isearch-mode t)
 '(global-highlight-changes-mode t)
 '(highlight-changes-visibility-initial-state nil)
 '(highlight-symbol-idle-delay 0.5)
 '(highlight-symbol-on-navigation-p t)
 '(ido-auto-merge-delay-time 10)
 '(ido-enable-flex-matching t)
 '(ido-enter-matching-directory (quote only))
 '(ido-everywhere t)
 '(ido-use-filename-at-point (quote guess))
 '(ido-use-url-at-point t)
 '(indent-tabs-mode nil)
 '(irony-additional-clang-options (quote ("-std=c++11 -I../src -I../../src -I../../../src")))
 '(irony-supported-major-modes (quote (c++-mode c-mode objc-mode protobuf-mode)))
 '(ispell-dictionary "deutsch")
 '(ispell-extra-args nil)
 '(ispell-program-name "/usr/bin/aspell")
 '(load-home-init-file t t)
 '(mark-even-if-inactive t)
 '(org-log-done (quote time))
 '(preview-gs-command "/opt/local/bin/gs")
 '(projectile-bzr-command "true")
 '(projectile-darcs-command "true")
 '(projectile-enable-caching t)
 '(projectile-git-command "true")
 '(projectile-globally-ignored-directories (quote (".idea" ".eunit" ".git" ".hg" ".fslckout" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "build")))
 '(projectile-hg-command "true")
 '(projectile-ignored-projects (quote ("/nfs/home/")))
 '(projectile-indexing-method (quote native))
 '(projectile-project-root-files (quote ("rebar.config" "project.clj" "pom.xml" "build.sbt" "build.gradle" "Gemfile" "requirements.txt" "package.json" "gulpfile.js" "Gruntfile.js" "bower.json" "composer.json" "SConstruct" "lastPerformance.pdf" "run.log")))
 '(projectile-project-root-files-bottom-up (quote (".projectile" ".git" ".hg" ".fslckout" ".bzr" "_darcs" "SConstruct" "setup.py")))
 '(projectile-project-root-files-top-down-recurring (quote ("CVS" "SConscript")))
 '(projectile-require-project-root t)
 '(projectile-switch-project-action (quote projectile-find-file-or-magit))
 '(ps-paper-type (quote a4))
 '(ps-print-color-p nil)
 '(python-fill-docstring-style 'django)
 '(python-shell-interpreter "ipython")
 '(recentf-initialize-file-name-history t)
 '(recentf-max-saved-items 8)
 '(recentf-mode t)
 '(reftex-plug-into-AUCTeX t)
 '(safe-local-variable-values (quote ((emacs-lisp-docstring-fill-column . 75))))
 '(scroll-bar-mode nil)
 ;; '(semantic-c-dependency-system-include-path (quote ("/usr/include")))
 ;; '(semantic-decoration-styles (quote (("semantic-decoration-on-includes" . t) ("semantic-decoration-on-protected-members" . t) ("semantic-decoration-on-private-members" . t) ("semantic-tag-boundary" . t))))
 ;; '(semantic-idle-scheduler-idle-time 1)
 ;; '(semantic-idle-scheduler-work-idle-time 60)
 '(transient-mark-mode 1)
 '(vc-log-show-limit 100)
 '(visible-cursor nil)
 '(void-text-area-pointer (quote arrow))
 )

(provide-theme 'my-custom-settings)
